#!/usr/bin/python
# -*- coding: utf8 -*-
"""
lib of ssh wrappers for gerrit command line api
"""

import logging
import json
import paramiko


def get_logger():
    """
    simple logger
    """
    mylogger = logging.getLogger(__name__)
    mylogger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler()
    handler.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    mylogger.addHandler(handler)
    return mylogger

logger = get_logger()


class GerritSSH(object):
    """
    Wrapper of ssh on which gerrit commands run.
    Can be reused since all internal states would be clear after re-run
    """
    def __init__(self, hostname, port, username):
        self.hostname = hostname
        self.port = port
        self.username = username
        self.stdout = None
        self.stderr = None
        self.client = None

    def exec_command(self, command):
        self.client = paramiko.SSHClient()
        self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.client.connect(hostname=self.hostname, port=self.port,
                            username=self.username, timeout=60)

        _, self.stdout, self.stderr = self.client.exec_command(command, timeout=60)
        self.stdout = self.stdout.readlines()
        self.stderr = self.stderr.readlines()

        self.client.close()

    def get_gerrit_minor_version(self):
        self.exec_command('gerrit version')
        # stdout example: [u'gerrit version 2.12.5\n']
        minor = self.stdout[0].strip().split(' ')[2].split('.')[1]
        return minor


class GerritQueryCondition(object):
    """
    Aid class GerritQuery
    """
    def __init__(self, basecondition, limit=None):
        self.basecondition = basecondition
        self.limit = limit
        if self.limit is not None:
            self.limitcondition = 'limit:{0}'.format(self.limit)
        else:
            self.limitcondition = ''


class GerritQuery(object):
    """
    Generate changes given appropriate query options
    """
    GERRIT_QUERY_BASIC_OPTIONS = (
        '--format JSON',
    )

    GERRIT_QUERY_VERBOSE_OPTIONS = (
        '--format JSON',
        '--current-patch-set',
        '--patch-sets',
        '--all-approvals',
        '--files',
        '--comments',
        '--commit-message',
        '--submit-records',
    )

    def __init__(self, ssh, querycondition):
        self.ssh = ssh
        self.querycondition = querycondition

    def _is_error(self):
        if len(self.ssh.stderr) != 0 or json.loads(self.ssh.stdout[0]).get('type', None) == 'error':
            return True
        return False

    def get_changes(self, verbose=False):
        if verbose:
            options = GerritQuery.GERRIT_QUERY_VERBOSE_OPTIONS
        else:
            options = GerritQuery.GERRIT_QUERY_BASIC_OPTIONS

        # see [[sortkey-deprecation]] section in:
        #     https://gerrit.googlesource.com/gerrit/+/master/ReleaseNotes/ReleaseNotes-2.9.txt
        gerrit_minor_version = self.ssh.get_gerrit_minor_version()

        changes = []
        resumeoption = ''
        while True:
            if self.querycondition.limit is not None:
                limitcondition = 'limit:{0}'.format(self.querycondition.limit - len(changes))
            else:
                limitcondition = ''

            if len(changes) != 0:
                if int(gerrit_minor_version) >= 9:
                    resumeoption = '--start {}'.format(len(changes))
                else:
                    resumeoption = 'resume_sortkey:{}'.format(changes[-1].sortKey)

            self.ssh.exec_command('gerrit query {0} {1} {2} {3}'.format(
                ' '.join(options), self.querycondition.basecondition, limitcondition, resumeoption))
            if self._is_error():
                raise Exception('gerrit query failed, stderr: {}'.format(self.ssh.stderr))

            raw_changes = self.ssh.stdout[:-1]
            if len(raw_changes) == 0:
                break

            for item in raw_changes:
                change = GerritChange.fromObject(json.loads(item))
                change.query_object = self
                changes.append(change)

            if self.querycondition.limit is not None and len(changes) >= self.querycondition.limit:
                changes = changes[1:self.querycondition.limit]
                break

        return changes

    def get_verbose_changes(self):
        return self.get_changes(verbose=True)

    def get_stats(self):
        if self._is_error():
            raise Exception('ssh result error, no valid result')
        return json.loads(self.ssh.stdout[1])


class GerritChange(object):
    """
    Changes originally generated by GerritQuery
    """
    def __init__(self):
        self.query_object = None

    @classmethod
    def fromObject(cls, myobject):
        change_object = cls()
        for key, value in myobject.iteritems():
            setattr(change_object, key, value)

        if getattr(change_object, 'branch', None) is None or \
           getattr(change_object, 'project', None) is None or \
           getattr(change_object, 'number', None) is None or \
           getattr(change_object, 'id', None) is None:
            raise Exception("invalid change object")

        return change_object

    def to_verbose(self):
        new_query_object = GerritQuery(
            self.query_object.ssh, GerritQueryCondition(
                'branch:{0} project:{1} change:{2}'.format(self.branch, self.project, self.id)))
        changes = new_query_object.get_verbose_changes()
        if len(changes) == 1:
            return changes[0]
        else:
            raise Exception("can not transform simple change to verbose")

    def __repr__(self):
        return '<status:{0} id:{1} branch:{2} project:{3}>'.format(
            self.status, self.id, self.branch, self.project)


class GerritGroups(object):
    """
    List all Gerrit groups
    """
    def __init__(self, ssh):
        self.ssh = ssh

    def _is_error(self):
        if len(self.ssh.stderr) != 0:
            return True
        return False

    def get_values(self):
        self.ssh.exec_command('gerrit ls-groups')
        if self._is_error():
            raise Exception('ls-groups failed, stderr: {}'.format(self.ssh.stderr))
        return [item.strip() for item in self.ssh.stdout]


class GerritMembers(object):
    """
    List all members of the group
    """
    # NOTICE: group should be utf-8 encoded for non-ascii characters
    def __init__(self, ssh, group):
        self.ssh = ssh
        self.group = group

    def _is_error(self):
        if len(self.ssh.stderr) != 0 or 'full name' not in  self.ssh.stdout[0]:
            return True
        return False

    # return list of [id, username, fullname, email]
    def get_values(self):
        # first line of normal result:
        #    u'id\tusername\tfull name\temail'
        self.ssh.exec_command("gerrit ls-members --recursive \'{0}\'".format(self.group))
        if self._is_error():
            if 'Group not found or not visible' in self.ssh.stdout[0]:
                raise Exception('ls-members failed: {}'.format(self.ssh.stdout[0]))
            else:
                raise Exception('ls-members failed, stderr: {}'.format(self.ssh.stderr))
        return [item.strip().split('\t') for item in self.ssh.stdout[1:]]


class GerritProjects(object):
    """
    List all Gerrit projects
    """
    def __init__(self, ssh):
        self.ssh = ssh

    def _is_error(self):
        if len(self.ssh.stderr) != 0:
            return True
        return False

    def get_values(self):
        self.ssh.exec_command('gerrit ls-projects --all')
        if self._is_error():
            raise Exception('ls-projects failed, stderr: {}'.format(self.ssh.stderr))
        return [item.strip() for item in self.ssh.stdout]


class GerritReview(object):
    """
    Review Gerrit change.
    Can set label "Code-Review" "Verified" and add comment message.
    """
    CODE_REVIEW = 'Code-Review'
    VERIFIED = 'Verified'

    # NOTICE: newline in message:
    # http://stackoverflow.com/questions/11717511/java-using-ssh-command-tom-make-multi-line-comments-on-gerrit
    def __init__(self, ssh, message, commit, code_review=None, verified=None):
        self.ssh = ssh
        self.message = message  # message must be encoded in utf-8
        self.code_review = code_review
        self.verified = verified
        self.commit = commit
        if self.code_review is not None and int(self.code_review) not in (-2, -1, 0, 1, 2):
            raise Exception('code review label score not valid: {0}'.format(self.code_review))
        if self.verified is not None and int(self.verified) not in (-1, 0, 1):
            raise Exception('verified label score not valid: {0}'.format(self.verified))

    def _is_error(self):
        if len(self.ssh.stderr) != 0:
            return True
        return False

    def execute(self):
        labeloptions = ''
        if self.code_review is not None:
            labeloptions += ' --label {0}={1} '.format(GerritReview.CODE_REVIEW, self.code_review)
        if self.verified is not None:
            labeloptions += ' --label {0}={1} '.format(GerritReview.VERIFIED, self.verified)

        self.ssh.exec_command('''gerrit review --message '{0}' {1} {2}'''.format(
            self.message, labeloptions, self.commit))
        if self._is_error():
            # possible error:
            #    u'fatal: "fb32da9060fec1428807dad8a2e4b7d89fe39ea" no such patch set\n'
            raise Exception('review failed, stderr: {}'.format(self.ssh.stderr))


class GerritSetReviewers(object):
    """
    Add or remove reviewers of one change
    """
    def __init__(self, ssh, commit, reviewers_added='', reviewers_removed=''):
        self.ssh = ssh
        self.commit = commit
        self.reviewers_added = [item for item in reviewers_added.split(',') if item != '']
        self.reviewers_removed = [item for item in reviewers_removed.split(',') if item != '']

    def _is_error(self):
        if len(self.ssh.stderr) != 0:
            return True
        return False

    def execute(self):
        addoption = ''
        if len(self.reviewers_added) > 0:
            addoption = ' -a ' + ' -a '.join(self.reviewers_added)

        removeoption = ''
        if len(self.reviewers_removed) > 0:
            removeoption = ' -r '+ ' -r '.join(self.reviewers_removed)

        self.ssh.exec_command('''gerrit set-reviewers {0} {1} {2}'''.format(
            addoption, removeoption, self.commit))
        if self._is_error():
            # possible error:
            # u'error: could not remove 1000109: not found\n', \
            #     u'fatal: one or more updates failed; review output above\n'
            raise Exception('set reviewers failed, stderr: {}'.format(self.ssh.stderr))

def _test():
    pass

    # CAUTION: THIS SCRIPT IS A LIBRARY, DO NOT ADD IRRELEVANT CODE IN THIS SCRIPT.
    #          DO NOT IMPLEMENT YOUR SPECIFIC PROBLEM SOLVING LOGIC IN THIS SCRIPT.
    # CALLING EXAMPLES:
    """
    import pprint
    pp = pprint.PrettyPrinter()

    # query changes
    ssh = GerritSSH(hostname='192.168.10.48', port=29418, username='scm')
    query = GerritQuery(ssh, GerritQueryCondition('branch:X555_H538_N_XOS status:merged'))
    #    outline
    pp.pprint([change for change in query.get_changes()])
    #    details
    pp.pprint(set([change.project for change in query.get_changes()]))

    # query changes, with limit number
    ssh = GerritSSH(hostname='192.168.10.48', port=29418, username='scm')
    query = GerritQuery(ssh, GerritQueryCondition('branch:X555_H538_N_XOS status:merged', limit=5))
    pp.pprint([change for change in query.get_changes()])

    # list all accessible groups
    ssh = GerritSSH(hostname='192.168.10.10', port=29418, username='scm')
    groups = GerritGroups(ssh)
    pp.pprint(groups.get_values())

    # list memebers of given group
    ssh = GerritSSH(hostname='192.168.10.10', port=29418, username='scm')
    groups = GerritGroups(ssh)
    members = GerritMembers(ssh, groups.get_values()[0].encode('utf-8'))
    pp.pprint(members.get_values())

    # list all accessible projects
    ssh = GerritSSH(hostname='192.168.10.10', port=29418, username='scm')
    projects = GerritProjects(ssh)
    pp.pprint(projects.get_values())

    # review patchset
    ssh = GerritSSH(hostname='192.168.10.10', port=29418, username='scm')
    review = GerritReview(ssh, u'我 是第一行 comment\n\n我 是第二行 comment'.encode('utf-8'),
        'fb32da9060fec1428807dad8a2e4b7d89fe3f9ea', code_review=-2, verified=-1)
    review.execute()

    # add/remove reviewers
    ssh = GerritSSH(hostname='192.168.10.10', port=29418, username='scm')
    setreviews = GerritSetReviewers(ssh, 'b0b7a1081559702140156c039bc8bad38e085184',
        reviewers_added='haobin.zhang,scm', reviewers_removed='')
    setreviews.execute()
    setreviews = GerritSetReviewers(ssh, 'b0b7a1081559702140156c039bc8bad38e085184',
        reviewers_added='', reviewers_removed='haobin.zhang,scm')
    setreviews.execute()
    """

if __name__ == '__main__':
    _test()
